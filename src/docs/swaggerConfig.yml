openapi: 3.0.3
info:
  title: Members-Only API
  description: A Sample API mimicking a social media platform, registered members can create a Profile, Post(s), comment on posts, like and unlike posts, exchange instant messages (integrated with Front End). Authorization is built in, members are only allowed to access authorized resources.
  version: 1.0.0

  contact:
    name: Lekan Adetunmbi
    email: me@pollaroid.net
    url: https://wwww.pollaroid.net

  license:
    name: MIT
    url: https://opensource.org/licenses/MIT

servers:
  - url: https://api-mbo.herokuapp.com/{basePath}
    description: Main (production) server
    variables:
      basePath:
        default: v1

components:
  schemas:
    User:
      type: object
      properties:
        _id:
          type: string
          format: mongo_id
        name:
          type: string
        email:
          type: string
          format: email
        password:
          type: string
          format: password
          minLength: 6
        avatar:
          type: string
        lastLogin:
          type: string
          format: date-time
        isAdmin:
          type: boolean
        isMember:
          type: boolean
        resetPassword:
          type: object
          properties:
            code:
              type: string
            expiresBy:
              type: string
              format: date-time
        refreshToken:
          type: object
          properties:
            token:
              type: string
              format: byte
            expiresBy:
              type: string
              format: date-time
        tokenVersion:
          type: integer
          format: int32
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
    Profile:
      type: object
      properties:
        _id:
          type: string
          format: mongo_id
        user:
          type: string
          format: mongo_id
        bio:
          type: string
        address:
          type: string
        phoneNumber:
          type: integer
          format: int64
        education:
          type: array
          items:
            type: object
            properties:
              school:
                type: string
              degree:
                type: string
              field:
                type: string
              from:
                type: string
                format: date-time
              to:
                type: string
                format: date-time
              description:
                type: string
        social:
          type: object
          properties:
            github:
              type: string
            linkedin:
              type: string
            twitter:
              type: string
    Post:
      type: object
      properties:
        _id:
          type: string
          format: mongo_id
        user:
          type: string
          format: mongo_id
        postTitle:
          type: string
        postContent:
          type: string
        datePosted:
          type: string
          format: date-time
        comments:
          type: array
          items:
            type: object
            properties:
              comment_user:
                type: string
                format: mongo_id
              comment_list:
                type: array
                items:
                  type: object
                  properties:
                    comment:
                      type: string
                    comment_date:
                      type: string
                      format: date-time
    Message:
      type: object
      properties:
        _id:
          type: string
          format: mongo_id
        sender:
          type: string
          format: mongo_id
        recipient:
          type: string
          format: mongo_id
        content:
          type: string
    File:
      type: string
      format: binary
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
    cookieAuth:
      type: http
      in: cookie
      name: jit
  responses:
    400BadRequest:
      description: Bad request
    401Unauthorized:
      description: Unauthorized
    403Forbidden:
      description: Forbidden
    404NotFound:
      description: The specified resource was not found
    409ConflictException:
      description: There is a conflict with the state of the requested operation
    500InternalServerException:
      description: Internal Server Error
paths:
  /admin/posts:
    get:
      tags:
        - Admin
      summary: Get All Posts
      description: Returns all posts
      operationId: getAllPosts
      security:
        - BearerAuth: []
      responses:
        '200':
          description: Success, All Posts
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Post'
        '401':
          $ref: '#/components/responses/401Unauthorized'
        '403':
          $ref: '#/components/responses/403Forbidden'
        '500':
          $ref: '#/components/responses/500InternalServerException'
  /admin/posts/{id}:
    get:
      tags:
        - Admin
      summary: Get Post By ID
      description: Returns the post with the given ID
      operationId: getPostById
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Success, Post
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Post'
        '401':
          $ref: '#/components/responses/401Unauthorized'
        '403':
          $ref: '#/components/responses/403Forbidden'
        '404':
          $ref: '#/components/responses/404NotFound'
        '500':
          $ref: '#/components/responses/500InternalServerException'
  /admin/users:
    get:
      tags:
        - Admin
      summary: Get All Users
      description: Returns all Users
      operationId: getAllUsers
      security:
        - BearerAuth: []
      responses:
        '200':
          description: Success, All Users
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
        '401':
          $ref: '#/components/responses/401Unauthorized'
        '403':
          $ref: '#/components/responses/403Forbidden'
        '500':
          $ref: '#/components/responses/500InternalServerException'
  /admin/users/{id}:
    get:
      tags:
        - Admin
      summary: Get User By ID
      description: Returns the user with the given ID
      operationId: getUserById
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Success, User
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '401':
          $ref: '#/components/responses/401Unauthorized'
        '403':
          $ref: '#/components/responses/403Forbidden'
        '404':
          $ref: '#/components/responses/404NotFound'
        '500':
          $ref: '#/components/responses/500InternalServerException'
  /admin/profiles:
    get:
      tags:
        - Admin
      summary: Get All Profiles
      description: Returns all Profiles
      operationId: getAllProfiles
      security:
        - BearerAuth: []
      responses:
        '200':
          description: Success, All Profiles
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Profile'
        '401':
          $ref: '#/components/responses/401Unauthorized'
        '403':
          $ref: '#/components/responses/403Forbidden'
        '500':
          $ref: '#/components/responses/500InternalServerException'
  /admin/profiles/{id}:
    get:
      tags:
        - Admin
      summary: Get Profile By ID
      description: Returns the Profile with the given ID
      operationId: getProfileById
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Success, Profile
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Profile'
        '401':
          $ref: '#/components/responses/401Unauthorized'
        '403':
          $ref: '#/components/responses/403Forbidden'
        '404':
          $ref: '#/components/responses/404NotFound'
        '500':
          $ref: '#/components/responses/500InternalServerException'
  /auth/login:
    post:
      tags:
        - Auth
      summary: User Login
      description: Logs in a user with the given credentials
      operationId: loginUser
      requestBody:
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                email:
                  type: string
                  format: email
                password:
                  type: string
                  format: password
      responses:
        '200':
          description: Successfully logged in
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  token:
                    type: string
                    format: byte
        '400':
          $ref: '#/components/responses/400BadRequest'
        '401':
          $ref: '#/components/responses/401Unauthorized'
        '500':
          $ref: '#/components/responses/500InternalServerException'
  /auth/logout:
    post:
      tags:
        - Auth
      summary: User Logout
      description: Logs out current logged in user session
      operationId: logoutUser
      responses:
        '200':
          description: Successfully logged out
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
        '500':
          $ref: '#/components/responses/500InternalServerException'        
  /auth/refresh-token:
    post:
      tags:
        - Auth
      summary: Refresh Token
      description: Refreshes the current user's token
      operationId: refreshToken
      security:
        - cookieAuth: []
      responses:
        '200':
          description: Successfully refreshed token
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  token:
                    type: string
        '403':
          description: Refresh Token Validation Failures
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
        '404':
          $ref: '#/components/responses/404NotFound'
        '500':
          $ref: '#/components/responses/500InternalServerException'
  /auth/2fa/register:
    post:
      tags:
        - Auth
      summary: Register Two factor Authentication
      description: Registers Two factor Authentication on a User's Profile to be used during Login
      operationId: register2FA
      security:
        - BearerAuth: []
      responses:
        '200':
          description: Success, QR Code generated and sent to the User
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                  message:
                    type: string
                  qrCode:
                    type: string
        '409':
          $ref: '#/components/responses/409ConflictException'
        '500':
          $ref: '#/components/responses/500InternalServerException'
  /auth/2fa/verify:
    post:
      tags:
        - Auth
      summary: Verify 2FA
      description: Verifies OTP Token and completes the 2FA Registration Process
      operationId: verify2FA
      security:
        - BearerAuth: []
      responses:
        '200':
          description: Successfully Completed 2FA Registration
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                  message:
                    type: string
        '400':
          $ref: '#/components/responses/400BadRequest'
        '403':
          description: Invalid OTP Token
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
        '500':
          $ref: '#/components/responses/500InternalServerException'
  /auth/2fa/validate:
    post:
      tags:
        - Auth
      summary: User Validate OTP Token
      description: Validates Provided OTP Token during userLogin for Users with 2FA Enabled
      operationId: validateOTPToken
      requestBody:
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                email:
                  type: string
                  format: email
                otpToken:
                  type: string
      responses:
        '200':
          description: OTP Validated and User Successfully logged in
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  token:
                    type: string
                    format: byte
        '400':
          $ref: '#/components/responses/400BadRequest'
        '401':
          $ref: '#/components/responses/401Unauthorized'
        '500':
          $ref: '#/components/responses/500InternalServerException'
  /auth/get-code:
    post:
      tags:
        - Auth
      summary: Send Verification Code
      description: Sends a verification code to the user's email
      operationId: sendVerificationCode
      requestBody:
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                email:
                  type: string
      responses:
        '200':
          description: Success, Verification Code Sent
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
        '400':
          $ref: '#/components/responses/400BadRequest'
        '404':
          $ref: '#/components/responses/404NotFound'
        '500':
          $ref: '#/components/responses/500InternalServerException'
  /auth/reset-password:
    post:
      tags:
        - Auth
      summary: Reset Password
      description: Resets the user's password
      operationId: resetPassword
      requestBody:
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                email:
                  type: string
                new_password:
                  type: string
                  format: password
                verification_code:
                  type: string
      responses:
        '200':
          description: Success, Password Reset
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  user:
                    $ref: '#/components/schemas/User'
        '400':
          $ref: '#/components/responses/400BadRequest'
        '403':
          description: Verification Code Validation Failures
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
        '404':
          $ref: '#/components/responses/404NotFound'
        '500':
          $ref: '#/components/responses/500InternalServerException'
  /auth/change-password:
    post:
      tags:
        - Auth
      summary: Change Password
      description: Changes the user's password
      operationId: changePassword
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                old_password:
                  type: string
                  format: password
                new_password:
                  type: string
                  format: password
      responses:
        '200':
          description: Success, Password Changed
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  user:
                    $ref: '#/components/schemas/User'
        '400':
          $ref: '#/components/responses/400BadRequest'
        '401':
          $ref: '#/components/responses/401Unauthorized'
        '404':
          $ref: '#/components/responses/404NotFound'
        '500':
          $ref: '#/components/responses/500InternalServerException'
  /users:
    post:
      tags:
        - User
      summary: Register User
      description: Registers a new user with the given details
      operationId: registerUser
      requestBody:
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                email:
                  type: string
                firstName:
                  type: string
                lastName:
                  type: string
                confirmPassword:
                  type: string
                  format: password
      responses:
        '200':
          description: Success, User Account Created
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  newUser:
                    $ref: '#/components/schemas/User'
        '400':
          description: Invalid Credentials/Validation Error
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
        '409':
          $ref: '#/components/responses/409ConflictException'
        '500':
          $ref: '#/components/responses/500InternalServerException'
    patch:
        tags:
          - User
        summary: Update User
        description: Updates the current authenticated user's basic information
        operationId: updateUser
        security:
          - BearerAuth: []
        responses:
          '200':
            description: Success, User Info Updated
            content:
              application/json:
                schema:
                  type: object
                  properties:
                    message:
                      type: string
          '400':
            $ref: '#/components/responses/400BadRequest'
          '401':
            $ref: '#/components/responses/401Unauthorized'
          '500':
            $ref: '#/components/responses/500InternalServerException'
    delete:
            tags:
              - User
            summary: Delete User
            description: Deletes the current user's account
            operationId: deleteUser
            security:
              - BearerAuth: []
            responses:
              '200':
                description: Success, User Account Deleted
                content:
                  application/json:
                    schema:
                      type: object
                      properties:
                        message:
                          type: string
              '401':
                $ref: '#/components/responses/401Unauthorized'
              '500':
                $ref: '#/components/responses/500InternalServerException'
          
  /users/userinfo:
    get:
      tags:
        - User
      summary: User Info
      description: Returns the current user's information
      operationId: getUserInfo
      security:
        - BearerAuth: []
      responses:
        '200':
          description: Success, User Info
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '401':
          $ref: '#/components/responses/401Unauthorized'
        '500':
          $ref: '#/components/responses/500InternalServerException'
  /posts:
    post:
      tags:
        - Post
      summary: Create Post
      description: Creates a post
      operationId: createPost
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Post'
      responses:
        '200':
          description: Success, Post Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Post'
        '400':
          $ref: '#/components/responses/400BadRequest'
        '401':
          $ref: '#/components/responses/401Unauthorized'
        '409':
          $ref: '#/components/responses/409ConflictException'
        '500':
          $ref: '#/components/responses/500InternalServerException'
  /posts/user:
    get:
      tags:
        - Post
      summary: Get Posts By User
      description: Returns all posts by the given user
      operationId: getPostsByUser
      security:
        - BearerAuth: []
      responses:
        '200':
          description: Success, All Posts
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Post'
        '401':
          $ref: '#/components/responses/401Unauthorized'
        '500':
          $ref: '#/components/responses/500InternalServerException'
  /posts/{id}/comment:
    put:
      tags:
        - Post
      summary: Add Comment
      description: Adds a comment to the post
      operationId: addComment
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                comment:
                  type: string
      responses:
        '200':
          description: Success, Comment Added
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Post'
        '400':
          $ref: '#/components/responses/400BadRequest'
        '401':
          $ref: '#/components/responses/401Unauthorized'
        '500':
          $ref: '#/components/responses/500InternalServerException'
  /posts/{id}/comment/{commentId}:
    delete:
      tags:
        - Post
      summary: Delete Comment
      description: Deletes a comment from the post
      operationId: deleteComment
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: mongo_id
        - name: commentId
          in: path
          required: true
          schema:
            type: string
            format: mongo_id
      responses:
        '200':
          description: Success, Comment Deleted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Post'
        '400':
          $ref: '#/components/responses/400BadRequest'
        '401':
          $ref: '#/components/responses/401Unauthorized'
        '500':
          $ref: '#/components/responses/500InternalServerException'
  /posts/{id}/like:
    put:
      tags:
        - Post
      summary: Like Post
      description: Likes the post
      operationId: likePost
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: mongo_id
      responses:
        '200':
          description: Success, Post Liked
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Post'
        '400':
          $ref: '#/components/responses/400BadRequest'
        '401':
          $ref: '#/components/responses/401Unauthorized'
        '500':
          $ref: '#/components/responses/500InternalServerException'
  /posts/{id}/unlike:
    delete:
      tags:
        - Post
      summary: Unlike Post
      description: Unlikes the post
      operationId: unlikePost
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: mongo_id
      responses:
        '200':
          description: Success, Post Unliked
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Post'
        '400':
          $ref: '#/components/responses/400BadRequest'
        '401':
          $ref: '#/components/responses/401Unauthorized'
        '500':
          $ref: '#/components/responses/500InternalServerException'
  /posts/{id}/:
    delete:
      tags:
        - Post
      summary: Delete Post
      description: Deletes the post
      operationId: deletePost
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: mongo_id
      responses:
        '200':
          description: Success, Post Deleted
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
        '400':
          $ref: '#/components/responses/400BadRequest'
        '401':
          $ref: '#/components/responses/401Unauthorized'
        '500':
          $ref: '#/components/responses/500InternalServerException'
  /profiles:
    post:
      tags:
        - Profile
      summary: Create Profile
      description: Creates a profile
      operationId: createProfile
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Profile'
      responses:
        '200':
          description: Success, Profile Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Profile'
        '400':
          $ref: '#/components/responses/400BadRequest'
        '401':
          $ref: '#/components/responses/401Unauthorized'
        '409':
          $ref: '#/components/responses/409ConflictException'
        '500':
          $ref: '#/components/responses/500InternalServerException'
    patch:
      tags:
        - Profile
      summary: Update Profile
      description: Updates the current authenticated user's profile
      operationId: updateProfile
      security:
        - BearerAuth: []
      responses:
        '200':
          description: Success, User Profile Updated
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
        '400':
          $ref: '#/components/responses/400BadRequest'
        '401':
          $ref: '#/components/responses/401Unauthorized'
        '500':
          $ref: '#/components/responses/500InternalServerException'
    delete:
      tags:
        - Profile
      summary: Delete Profile
      description: Deletes the current authenticated user's profile
      operationId: deleteProfile
      security:
        - BearerAuth: []
      responses:
        '200':
          description: Success, User Profile Updated
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
        '400':
          $ref: '#/components/responses/400BadRequest'
        '401':
          $ref: '#/components/responses/401Unauthorized'
        '500':
          $ref: '#/components/responses/500InternalServerException'
  /profiles/user:
    get:
      tags:
        - Profile
      summary: Get User Profile
      description: Returns the user profile
      operationId: getUserProfile
      security:
        - BearerAuth: []
      responses:
        '200':
          description: Success, User Profile
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Profile'
        '401':
          $ref: '#/components/responses/401Unauthorized'
        '500':
          $ref: '#/components/responses/500InternalServerException'
  /messages/user:
    get:
      tags:
        - Message
      summary: Get Messages from a User
      description: Returns All messages from the authenticated user
      operationId: getMessages
      security:
        - BearerAuth: []
      responses:
        '200':
          description: Success, Messages from user returned
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Message'
        '401':
          $ref: '#/components/responses/401Unauthorized'
        '500':
          $ref: '#/components/responses/500InternalServerException'
  /messages/{id}:
    delete:
      tags:
        - Message
      summary: Delete Message
      description: Deletes a message
      operationId: deleteMessage
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Message'
      responses:
        '200':
          description: Success, Message Deleted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Message'
        '400':
          $ref: '#/components/responses/400BadRequest'
        '401':
          $ref: '#/components/responses/401Unauthorized'
        '500':
          $ref: '#/components/responses/500InternalServerException'
  /media/upload:
    post:
      tags:
        - Media
      summary: Upload Media
      description: Uploads a new File
      operationId: uploadMedia
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/File'
      responses:
        '200':
          description: Success, Message Deleted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/File'
        '400':
          $ref: '#/components/responses/400BadRequest'
        '401':
          $ref: '#/components/responses/401Unauthorized'
        '500':
          $ref: '#/components/responses/500InternalServerException'
  /media/{filename}:
    get:
      tags:
        - Media
      summary: Get File
      description: Returns file with the specified filename
      operationId: getMediaFile
      security:
        - BearerAuth: []
      responses:
        '200':
          description: Success, File returned
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/File'
        '400':
          $ref: '#/components/responses/400BadRequest'
        '401':
          $ref: '#/components/responses/401Unauthorized'
        '500':
          $ref: '#/components/responses/500InternalServerException'
    delete:
      tags:
        - Media
      summary: Delete File
      description: Deletes a single file with the specified filename
      operationId: deleteMediaFile
      security:
        - BearerAuth: []
      responses:
        '200':
          description: Success, File deleted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/File'
        '400':
          $ref: '#/components/responses/400BadRequest'
        '401':
          $ref: '#/components/responses/401Unauthorized'
        '500':
          $ref: '#/components/responses/500InternalServerException'