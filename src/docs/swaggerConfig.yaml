openapi: 3.0.0
info:
  title: Members-Only API
  description: A Sample API mimicking a social media platform, it allows members to access only authorized resources. .
  version: 1.0.0

  contact:
    name: Lekan Adetunmbi
    email: me@pollaroid.net
    url: https://wwww.pollaroid.net

  license:
    name: MIT
    url: https://opensource.org/licenses/MIT

servers:
  - url: https://api-mbo.herokuapp.com/v1
    description: Main (production) server

components:
  schemas:
    User:
      type: "object"
      properties:
        _id:
          type: "string"
          format: "uuid"
        name:
          type: "string"
        email:
          type: "string"
          format: "email"
        password:
          type: "string"
          format: "password"
        avatar:
          type: "string"
        lastLogin:
          type: "string"
          format: "date-time"
        isAdmin:
          type: "boolean"
        isMember:
          type: "boolean"
        resetPassword:
          type: "object"
          properties:
            code:
              type: "string"
            expiresBy:
              type: "string"
              format: "date-time"
        refreshToken:
          type: "object"
          properties:
            token:
              type: "string"
              format: "byte"
            expiresBy:
              type: "string"
              format: "date-time"
        tokenVersion:
          type: "integer"
          format: "int32"
        createdAt:
          type: "string"
          format: "date-time"
        updatedAt:
          type: "string"
          format: "date-time"
    Profile:
      type: "object"
      properties:
        _id:
          type: "string"
          format: "uuid"
        user:
          type: "string"
          format: "uuid"
        bio:
          type: "string"
        address:
          type: "string"
        phoneNumber:
          type: "integer"
          format: "int64"
        education:
          type: "array"
          items:
            type: "object"
            properties:
              school:
                type: "string"
              degree:
                type: "string"
              field:
                type: "string"
              from:
                type: "string"
                format: "date-time"
              to:
                type: "string"
                format: "date-time"
              description:
                type: "string"
        social:
          type: "object"
          properties:
            github:
              type: "string"
            linkedin:
              type: "string"
            twitter:
              type: "string"
    Post:
      type: "object"
      properties:
        _id:
          type: "string"
          format: "uuid"
        user:
          type: "string"
          format: "uuid"
        postTitle:
          type: "string"
        postContent:
          type: "string"
        datePosted:
          type: "string"
          format: "date-time"
        comments:
          type: "array"
          items:
            type: "object"
            properties:
              comment_user:
                type: "string"
                format: "uuid"
              comment_list:
                type: "array"
                items:
                  type: "object"
                  properties:
                    comment:
                      type: "string"
                    comment_date:
                      type: "string"
                      format: "date-time"
  securitySchemes:
    BearerAuth:
      type: "http"
      scheme: "bearer"
      bearerFormat: "JWT"
    cookieAuth:
      type: "apiKey"
      in: "cookie"
      name: "jit"
  responses:
    400BadRequest:
      description: Bad request
    401Unauthorized:
      description: "Unauthorized"
    403Forbidden:
      description: "Forbidden"
    404NotFound:
      description: "The specified resource was not found"
    409ConflictError:
      description: "There is a conflict with the state of the requested operation"
    500ServerError:
      description: "Internal Server Error"
paths:
  /auth/logout:
    get:
      tags:
        - Auth
      summary: User Logout
      description: Logs out current logged in user session
      operationId: logoutUser
      responses:
        '200':
          description: "Successfully logged out"
          content:
            application/json:
              schema:
                type: "object"
                properties:
                  message:
                    type: "string"
        '500':
          $ref: '#/components/responses/500ServerError'
  /auth/login:
    post:
      tags:
        - Auth
      summary: User Login
      description: Logs in a user with the given credentials
      operationId: loginUser
      requestBody:
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              type: "object"
              properties:
                email:
                  type: "string"
                  format: "email"
                password:
                  type: "string"
                  format: "password"
      responses:
        '200':
          description: "Successfully logged in"
          content:
            application/json:
              schema:
                type: "object"
                properties:
                  message:
                    type: "string"
                  token:
                    type: "string"
                    format: "byte"
        '400':
          description: "Invalid Credentials/Validation Error"
          content:
            application/json:
              schema:
                type: "object"
                properties:
                  message:
                    type: "string"
        '404':
          $ref: '#/components/responses/404NotFound'
        '500':
          $ref: '#/components/responses/500ServerError'
  /auth/refresh-token:
    post:
      tags:
        - Auth
      summary: Refresh Token
      description: Refreshes the current user's token
      operationId: refreshToken
      security:
        - cookieAuth: []
      responses:
        '200':
          description: 'Successfully refreshed token'
          content:
            application/json:
              schema:
                type: "object"
                properties:
                  message:
                    type: "string"
                  token:
                    type: "string"
        '403':
          description: 'Refresh Token Validation Failures'
          content:
            application/json:
              schema:
                type: "object"
                properties:
                  message:
                    type: "string"
        '404':
          $ref: '#/components/responses/404NotFound'
        '500':
          $ref: '#/components/responses/500ServerError'
  /users/register:
    post:
      tags:
        - User
      summary: Register User
      description: Registers a new user with the given credentials
      operationId: registerUser
      requestBody:
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              type: "object"
              properties:
                email:
                  type: "string"
                firstName:
                  type: "string"
                lastName:
                  type: "string"
                confirmPassword:
                  type: "string"
                  format: "password"
      responses:
        '200':
          description: "Success, User Account Created"
          content:
            application/json:
              schema:
                type: "object"
                properties:
                  message:
                    type: "string"
                  newUser:
                    $ref: "#/components/schemas/User"
        '400':
          description: "Invalid Credentials/Validation Error"
          content:
            application/json:
              schema:
                type: "object"
                properties:
                  message:
                    type: "string"
        '409':
          $ref: '#/components/responses/409ConflictError'
        '500':
          $ref: '#/components/responses/500ServerError'
  /users/all-users:
    get:
      tags:
        - User
      summary: User Info
      description: Returns the current user's information
      operationId: getUserInfo
      security:
        - BearerAuth: []
      responses:
        '200':
          description: "Success, User Info"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        '401':
          $ref: '#/components/responses/401Unauthorized'
        '403':
          $ref: '#/components/responses/403Forbidden'
        '500':
          $ref: '#/components/responses/500ServerError'
  /users/userinfo:
    get:
      tags:
        - User
      summary: User Info
      description: Returns the current user's information
      operationId: getUserInfo
      security:
        - BearerAuth: []
      responses:
        '200':
          description: "Success, User Info"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        '401':
          $ref: '#/components/responses/401Unauthorized'
        '500':
          $ref: '#/components/responses/500ServerError'
  /users/delete-user:
    delete:
      tags:
        - User
      summary: Delete User
      description: Deletes the current user's account
      operationId: deleteUser
      security:
        - BearerAuth: []
      responses:
        '200':
          description: "Success, User Account Deleted"
          content:
            application/json:
              schema:
                type: "object"
                properties:
                  message:
                    type: "string"
        '401':
          $ref: '#/components/responses/401Unauthorized'
        '500':
          $ref: '#/components/responses/500ServerError'
  /password/get-verification-code:
    put:
      tags:
        - Password
      summary: Send Verification Code
      description: Sends a verification code to the user's email
      operationId: sendVerificationCode
      requestBody:
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              type: "object"
              properties:
                email:
                  type: "string"
      responses:
        '200':
          description: "Success, Verification Code Sent"
          content:
            application/json:
              schema:
                type: "object"
                properties:
                  message:
                    type: "string"
        '400':
          $ref: '#/components/responses/400BadRequest'
        '404':
          $ref: '#/components/responses/404NotFound'
        '500':
          $ref: '#/components/responses/500ServerError'
  /password/reset-password:
    put:
      tags:
        - Password
      summary: Reset Password
      description: Resets the user's password
      operationId: resetPassword
      requestBody:
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              type: "object"
              properties:
                email:
                  type: "string"
                new_password:
                  type: "string"
                  format: "password"
                verification_code:
                  type: "string"
      responses:
        '200':
          description: "Success, Password Reset"
          content:
            application/json:
              schema:
                type: "object"
                properties:
                  message:
                    type: "string"
                  user:
                    $ref: "#/components/schemas/User"
        '400':
          $ref: '#/components/responses/400BadRequest'
        '403':
          description: "Verification Code Validation Failures"
          content:
            application/json:
              schema:
                type: "object"
                properties:
                  message:
                    type: "string"
        '404':
          $ref: '#/components/responses/404NotFound'
        '500':
          $ref: '#/components/responses/500ServerError'
  /password/change-password:
    put:
      tags:
        - Password
      summary: Change Password
      description: Changes the user's password
      operationId: changePassword
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              type: "object"
              properties:
                old_password:
                  type: "string"
                  format: "password"
                new_password:
                  type: "string"
                  format: "password"
      responses:
        '200':
          description: "Success, Password Changed"
          content:
            application/json:
              schema:
                type: "object"
                properties:
                  message:
                    type: "string"
                  user:
                    $ref: "#/components/schemas/User"
        '400':
          $ref: '#/components/responses/400BadRequest'
        '401':
          $ref: '#/components/responses/401Unauthorized'
        '404':
          $ref: '#/components/responses/404NotFound'
        '500':
          $ref: '#/components/responses/500ServerError'
  /posts/all-posts:
    get:
      tags:
        - Post
      summary: Get All Posts
      description: Returns all posts
      operationId: getAllPosts
      security:
        - BearerAuth: []
      responses:
        '200':
          description: "Success, All Posts"
          content:
            application/json:
              schema:
                type: "array"
                items:
                  $ref: "#/components/schemas/Post"
        '401':
          $ref: '#/components/responses/401Unauthorized'
        '500':
          $ref: '#/components/responses/500ServerError'
  /posts/post-by-user:
    get:
      tags:
        - Post
      summary: Get Posts By User
      description: Returns all posts by the given user
      operationId: getPostsByUser
      security:
        - BearerAuth: []
      responses:
        '200':
          description: "Success, All Posts"
          content:
            application/json:
              schema:
                type: "array"
                items:
                  $ref: "#/components/schemas/Post"
        '401':
          $ref: '#/components/responses/401Unauthorized'
        '500':
          $ref: '#/components/responses/500ServerError'
  /posts/{id}:
    get:
      tags:
        - Post
      summary: Get Post By ID
      description: Returns the post with the given ID
      operationId: getPostById
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: "string"
      responses:
        '200':
          description: "Success, Post"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Post"
        '401':
          $ref: '#/components/responses/401Unauthorized'
        '404':
          $ref: '#/components/responses/404NotFound'
        '500':
          $ref: '#/components/responses/500ServerError'
  /posts/create-post:
    post:
      tags:
        - Post
      summary: Create Post
      description: Creates a post
      operationId: createPost
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Post"
      responses:
        '200':
          description: "Success, Post Created"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Post"
        '400':
          $ref: '#/components/responses/400BadRequest'
        '401':
          $ref: '#/components/responses/401Unauthorized'
        '409':
          $ref: '#/components/responses/409ConflictError'
        '500':
          $ref: '#/components/responses/500ServerError'
  /posts/{id}/add-comment:
    put:
      tags:
        - Post
      summary: Add Comment
      description: Adds a comment to the post
      operationId: addComment
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: "string"
      requestBody:
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              type: "object"
              properties:
                comment:
                  type: "string"
      responses:
        '200':
          description: "Success, Comment Added"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Post"
        '400':
          $ref: '#/components/responses/400BadRequest'
        '401':
          $ref: '#/components/responses/401Unauthorized'
        '500':
          $ref: '#/components/responses/500ServerError'
  /posts/{id}/delete-comment/{commentId}:
    delete:
      tags:
        - Post
      summary: Delete Comment
      description: Deletes a comment from the post
      operationId: deleteComment
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: "string"
            format: "uuid"
        - name: commentId
          in: path
          required: true
          schema:
            type: "string"
            format: "uuid"
      responses:
        '200':
          description: "Success, Comment Deleted"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Post"
        '400':
          $ref: '#/components/responses/400BadRequest'
        '401':
          $ref: '#/components/responses/401Unauthorized'
        '500':
          $ref: '#/components/responses/500ServerError'
  /posts/{id}/like-post:
    put:
      tags:
        - Post
      summary: Like Post
      description: Likes the post
      operationId: likePost
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: "string"
            format: "uuid"
      responses:
        '200':
          description: "Success, Post Liked"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Post"
        '400':
          $ref: '#/components/responses/400BadRequest'
        '401':
          $ref: '#/components/responses/401Unauthorized'
        '500':
          $ref: '#/components/responses/500ServerError'
  /posts/{id}/unlike-post:
    delete:
      tags:
        - Post
      summary: Unlike Post
      description: Unlikes the post
      operationId: unlikePost
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: "string"
            format: "uuid"
      responses:
        '200':
          description: "Success, Post Unliked"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Post"
        '400':
          $ref: '#/components/responses/400BadRequest'
        '401':
          $ref: '#/components/responses/401Unauthorized'
        '500':
          $ref: '#/components/responses/500ServerError'
  /posts/{id}/delete-post:
    delete:
      tags:
        - Post
      summary: Delete Post
      description: Deletes the post
      operationId: deletePost
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: "string"
            format: "uuid"
      responses:
        '200':
          description: "Success, Post Deleted"
          content:
            application/json:
              schema:
                type: "object"
                properties:
                  message:
                    type: "string"
        '400':
          $ref: '#/components/responses/400BadRequest'
        '401':
          $ref: '#/components/responses/401Unauthorized'
        '500':
          $ref: '#/components/responses/500ServerError'
  /profile/user-profile:
    get:
      tags:
        - Profile
      summary: Get User Profile
      description: Returns the user profile
      operationId: getUserProfile
      security:
        - BearerAuth: []
      responses:
        '200':
          description: "Success, User Profile"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Profile"
        '401':
          $ref: '#/components/responses/401Unauthorized'
        '500':
          $ref: '#/components/responses/500ServerError'
  /profile/create-profile:
    post:
      tags:
        - Profile
      summary: Create Profile
      description: Creates a profile
      operationId: createProfile
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Profile"
      responses:
        '200':
          description: "Success, Profile Created"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Profile"
        '400':
          $ref: '#/components/responses/400BadRequest'
        '401':
          $ref: '#/components/responses/401Unauthorized'
        '409':
          $ref: '#/components/responses/409ConflictError'
        '500':
          $ref: '#/components/responses/500ServerError'
    