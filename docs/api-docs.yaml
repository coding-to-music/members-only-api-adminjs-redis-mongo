openapi: "3.0.0"
info:
  title: "Members-Only API"
  description: "Sample API mimicking a members-only service"
  version: "1.0.0"
  contact:
    email: "me@pollaroid.net"
  license:
    name: "MIT"
    url: "https://opensource.org/licenses/MIT"
host: "wauth-svr.azurewebsites.net"
basePath: "/api"
servers:
  - url: "https://wauth-svr.azurewebsites.net/api"
    description: "Production"
tags:
  - name: "auth"
    description: "Authentication Routes"
  - name: "password"
    description: "Password management operations"
  - name: "user"
    description: "User management operations"
  - name: "profile"
    description: "User Profile management operations"
  - name: "post"
    description: "Post management operations"
schemes:
  - "https"
components:
  schemas:
    User:
      type: "object"
      properties:
        _id:
          type: "integer"
          format: "int64"
        name:
          type: "string"
        email:
          type: "string"
        password:
          type: "string"
        avatar:
          type: "string"
        lastLogin:
          type: "string"
          format: "date-time"
        isAdmin:
          type: "boolean"
        isMember:
          type: "boolean"
        resetPassword:
          type: "object"
          properties:
            code:
              type: "string"
            expiresBy:
              type: "string"
              format: "date-time"
        refreshToken:
          type: "object"
          properties:
            token:
              type: "string"
            expiresBy:
              type: "string"
              format: "date-time"
        tokenVersion:
          type: "integer"
        createdAt:
          type: "string"
          format: "date-time"
        updatedAt:
          type: "string"
          format: "date-time"
      xml:
        name: "User"
    Profile:
      type: "object"
      properties:
        _id:
          type: "integer"
          format: "int64"
        user:
          $ref: "#/components/schemas/User"
        bio:
          type: "string"
        address:
          type: "string"
        phoneNumber:
          type: "integer"
          format: "int64"
        education:
          type: "array"
          items:
            type: "object"
            properties:
              school:
                type: "string"
              degree:
                type: "string"
              field:
                type: "string"
              from:
                type: "string"
                format: "date-time"
              to:
                type: "string"
                format: "date-time"
              description:
                type: "string"
        social:
          type: "object"
          properties:
            github:
              type: "string"
            linkedin:
              type: "string"
            twitter:
              type: "string"
      xml:
        name: "Profile"
    Post:
      type: "object"
      properties:
        _id:
          type: "integer"
          format: "int64"
        user:
          $ref: "#/components/schemas/User"
        post_content:
          type: "string"
        date_posted:
          type: "string"
          format: "date-time"
        comments:
          type: "array"
          items:
            type: "object"
            properties:
              comment_user:
                $ref: "#/components/schemas/User"
              comment_list:
                type: "array"
                items:
                  type: "object"
                  properties:
                    comment:
                      type: "string"
                    comment_date:
                      type: "string"
                      format: "date-time"
      xml:
        name: "Post"
    ApiResponse:
      type: "object"
      properties:
        code:
          type: "integer"
          format: "int32"
        type:
          type: "string"
        message:
          type: "string"
  securitySchemes:
    BearerAuth:
      type: "http"
      scheme: "bearer"
      bearerFormat: "JWT"
    cookieAuth:
      type: "apiKey"
      name: "jit"
      in: "signedCookies"
paths:
  /auth/logout:
    get:
      tags:
        - "auth"
      summary: "Logs out current logged in user session"
      description: ""
      operationId: "logoutUser"
      produces:
        - "application/json"
      parameters: []
      responses:
        "200":
          description: "Logout Successful"
          schema:
            type: "object"
            properties:
              message:
                type: "string"
  /auth/login:
    post:
      tags:
        - "auth"
      summary: "Logs user into the application"
      description: ""
      operationId: "loginUser"
      produces:
        - "application/json"
      consumes:
        - "application/x-www-form-urlencoded"
        - "multipart/form-data"
      parameters:
        - name: "email"
          in: "formData"
          description: "The email to login in with"
          required: true
          type: "string"
        - name: "password"
          in: "formData"
          description: "The password to login in with"
          required: true
          type: "string"
          format: "password"
      responses:
        "200":
          description: "successful operation"
          schema:
            type: "object"
            properties:
              message:
                type: "string"
              token:
                type: "string"
        "400":
          description: "Invalid email/password supplied or Failed validation checks"
        "404":
          description: "Request user not found"
        "500":
          description: "Internal Server Error"
  /auth/refresh_token:
    post:
      tags:
        - "auth"
      summary: "Refresh the current user token"
      description: ""
      operationId: "refreshUserToken"
      consumes:
        - "application/json"
      produces:
        - "application/json"
      parameters:
        - name: "jit"
          in: "header"
          description: "JIT token"
          required: true
          type: "string"
          format: "string"
      responses:
        "200":
          description: "Success, Token refreshed"
          schema:
            type: "object"
            properties:
              message:
                type: "string"
              token:
                type: "string"
        "400":
          description: "Bad Request"
        "403":
          description: "Invalid refresh token/Refresh token expired/Invalid token version"
        "404":
          description: "User not found"
        "500":
          description: "Internal Server Error"
  /user/register:
    post:
      tags:
        - "user"
      summary: "Create user"
      description: "Creates a new User"
      operationId: "createUser"
      produces:
        - "application/json"
      consumes:
        - "application/x-www-form-urlencoded"
        - "multipart/form-data"
      parameters:
        - name: "email"
          in: "formData"
          description: "New user email"
          required: true
          type: "string"
        - name: "password"
          in: "formData"
          description: "New user password"
          required: true
          type: "string"
          format: "password"
          schema:
            $ref: "#/components/schemas/User"
      responses:
        "200":
          description: "Success, User Created"
          schema:
          $ref: "#/components/schemas/User"
        "400":
          description: "Failed validation checks"
        "500":
          description: "Internal Server Error"
  /user/userinfo:
    get:
      tags:
        - "user"
      summary: "Get user info"
      description: "Get user info"
      security:
        - BearerAuth: []
      operationId: "getUserInfo"
      produces:
        - "application/json"
      parameters:
        - name: "Bearer"
          in: "header"
          description: "Bearer token"
          required: true
          type: "string"
          format: "string"
      responses:
        "200":
          description: "Success, User info returned"
          schema:
          $ref: "#/components/schemas/User"
        "400":
          description: "Bad Request"
        "403":
          description: "Unauthroized"
        "500":
          description: "Internal Server Error"
   
   