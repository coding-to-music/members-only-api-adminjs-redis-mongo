swagger: "2.0"
info:
  description: "Sample API mimicking a members-only service"
  version: "1.0.0"
  title: "Members-Only API"
  termsOfService: "http://swagger.io/terms/"
  contact:
    email: "me@pollaroid.net"
  license:
    name: "MIT"
    url: "https://opensource.org/licenses/MIT"
host: "wauth-svr.azurewebsites.net"
basePath: "/api"
tags:
- name: "auth"
  description: "Authentication Routes"
- name: "password"
  description: "Password management options"
- name: "user"
  description: "Operations about user"
- name: "profile"
  description: "Everything about your Pets"
- name: "post"
  description: "Access to Petstore orders"
schemes:
- "https"
- "http"
definitions:
  User:
    type: "object"
    properties:
      _id:
        type: "integer"
        format: "int64"
      name:
        type: "string"
      email:
        type: "string"
      password:
        type: "string"
      avatar:
        type: "string"
      lastLogin:
        type: "string"
        format: "date-time"
      isAdmin:
        type: "boolean"
      isMember:
        type: "boolean"
      resetPassword: 
        type: "object"
        properties:
          code:
            type: "string"
          expiresBy:
            type: "string"
            format: "date-time"
      refreshToken:
        type: "object"
        properties:
          token:
            type: "string"
          expiresBy:
            type: "string"
            format: "date-time"
      tokenVersion:
        type: "integer"
      createdAt:
        type: "string"
        format: "date-time"
      updatedAt:
        type: "string"
        format: "date-time"
    xml:
      name: "User"
  Profile:
    type: "object"
    properties:
      _id:
        type: "integer"
        format: "int64"
      user:
        $ref: "#/definitions/User"
      bio:
        type: "string"
      address:
        type: "string"
      phoneNumber:
        type: "integer"
        format: "int64"
      education:
        type: "array"
        items:
          type: "object"
          properties:
            school:
              type: "string"
            degree:
              type: "string"
            field:
              type: "string"
            from:
              type: "string"
              format: "date-time"
            to:
              type: "string"
              format: "date-time"
            description:
              type: "string"
      social:
        type: "object"
        properties:
          github:
            type: "string"
          linkedin:
            type: "string"
          twitter:
            type: "string"
    xml:
      name: "Profile"
  Post:
    type: "object"
    properties:
      _id:
        type: "integer"
        format: "int64"
      user:
        $ref: "#/definitions/User"
      post_content:
        type: "string"
      date_posted:
        type: "string"
        format: "date-time"
      comments:
        type: "array"
        items:
          type: "object"
          properties:
            comment_user:
              $ref: "#/definitions/User"
            comment_list:
              type: "array"
              items:
                type: "object"
                properties:
                  comment:
                    type: "string"
                  comment_date:
                    type: "string"
                    format: "date-time"
    xml:
      name: "Post"
  ApiResponse:
    type: "object"
    properties:
      code:
        type: "integer"
        format: "int32"
      type:
        type: "string"
      message:
        type: "string"
paths:
  /auth/logout:
    get:
      tags:
      - "auth"
      summary: "Logs out current logged in user session"
      description: ""
      operationId: "logoutUser"
      produces:
      - "application/json"
      parameters: []
      responses:
        "200":
          description: "Logout Successful"
          schema:
            type: "object"
            properties:
              message:
                type: "string"
  /auth/login:
    post:
      tags:
      - "auth"
      summary: "Logs user into the application"
      description: ""
      operationId: "loginUser"
      produces:
      - "application/json"
      consumes:
      - "application/x-www-form-urlencoded"
      - "multipart/form-data"
      parameters:
      - name: "email"
        in: "formData"
        description: "The user name for login"
        required: true
        type: "string"
      - name: "password"
        in: "formData"
        description: "The password for login in clear text"
        required: true
        type: "string"
        format: "password"
      responses:
        "200":
          description: "successful operation"
          schema:
            type: "object"
            properties:
              message:
                type: "string"
              token:
                type: "string"
        "400":
          description: "Invalid email/password supplied or Failed validation checks"
        "404":
          description: "Request user not found"
        "500":
          description: "Internal Server Error"
  /auth/refresh_token:
    post:
      tags:
      - "auth"
      summary: "Refresh the current user token"
      description: ""
      operationId: "refreshUserToken"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "jit"
        in: "Request.signedCookies"
        description: "Valid Refresh token to get a new token"
        required: true
      responses:
        "200":
          description: "Success, Token refreshed"
          schema:
            type: "object"
            properties:
              message:
                type: "string"
              token:
                type: "string"
        "400":
          description: "Bad Request"
        "403":
          description: "Invalid refresh token/Refresh token expired/Invalid token version"
        "404":
          description: "User not found"
        "500":
          description: "Internal Server Error"
  /user:
    post:
      tags:
      - "user"
      summary: "Create user"
      description: "This can only be done by the logged in user."
      operationId: "createUser"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Created user object"
        required: true
        schema:
          $ref: "#/definitions/User"
      responses:
        default:
          description: "successful operation"
  /user/createWithArray:
    post:
      tags:
      - "user"
      summary: "Creates list of users with given input array"
      description: ""
      operationId: "createUsersWithArrayInput"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "List of user object"
        required: true
        schema:
          type: "array"
          items:
            $ref: "#/definitions/User"
      responses:
        default:
          description: "successful operation"
  /user/createWithList:
    post:
      tags:
      - "user"
      summary: "Creates list of users with given input array"
      description: ""
      operationId: "createUsersWithListInput"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "List of user object"
        required: true
        schema:
          type: "array"
          items:
            $ref: "#/definitions/User"
      responses:
        default:
          description: "successful operation"
  /user/{username}:
    get:
      tags:
      - "user"
      summary: "Get user by user name"
      description: ""
      operationId: "getUserByName"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "username"
        in: "path"
        description: "The name that needs to be fetched. Use user1 for testing. "
        required: true
        type: "string"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/User"
        "400":
          description: "Invalid username supplied"
        "404":
          description: "User not found"
    put:
      tags:
      - "user"
      summary: "Updated user"
      description: "This can only be done by the logged in user."
      operationId: "updateUser"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "username"
        in: "path"
        description: "name that need to be updated"
        required: true
        type: "string"
      - in: "body"
        name: "body"
        description: "Updated user object"
        required: true
        schema:
          $ref: "#/definitions/User"
      responses:
        "400":
          description: "Invalid user supplied"
        "404":
          description: "User not found"
    delete:
      tags:
      - "user"
      summary: "Delete user"
      description: "This can only be done by the logged in user."
      operationId: "deleteUser"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "username"
        in: "path"
        description: "The name that needs to be deleted"
        required: true
        type: "string"
      responses:
        "400":
          description: "Invalid username supplied"
        "404":
          description: "User not found"
  /store/inventory:
    get:
      tags:
      - "store"
      summary: "Returns pet inventories by status"
      description: "Returns a map of status codes to quantities"
      operationId: "getInventory"
      produces:
      - "application/json"
      parameters: []
      responses:
        "200":
          description: "successful operation"
          schema:
            type: "object"
            additionalProperties:
              type: "integer"
              format: "int32"
      security:
      - api_key: []
  /store/order:
    post:
      tags:
      - "store"
      summary: "Place an order for a pet"
      description: ""
      operationId: "placeOrder"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "order placed for purchasing the pet"
        required: true
        schema:
          $ref: "#/definitions/Profile"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/Profile"
        "400":
          description: "Invalid Order"
  /store/order/{orderId}:
    get:
      tags:
      - "store"
      summary: "Find purchase order by ID"
      description: "For valid response try integer IDs with value >= 1 and <= 10.         Other values will generated exceptions"
      operationId: "getOrderById"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "orderId"
        in: "path"
        description: "ID of pet that needs to be fetched"
        required: true
        type: "integer"
        maximum: 10.0
        minimum: 1.0
        format: "int64"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/Profile"
        "400":
          description: "Invalid ID supplied"
        "404":
          description: "Order not found"
    delete:
      tags:
      - "store"
      summary: "Delete purchase order by ID"
      description: "For valid response try integer IDs with positive integer value.         Negative or non-integer values will generate API errors"
      operationId: "deleteOrder"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "orderId"
        in: "path"
        description: "ID of the order that needs to be deleted"
        required: true
        type: "integer"
        minimum: 1.0
        format: "int64"
      responses:
        "400":
          description: "Invalid ID supplied"
        "404":
          description: "Order not found"
securityDefinitions:
  petstore_auth:
    type: "oauth2"
    authorizationUrl: "http://petstore.swagger.io/oauth/dialog"
    flow: "implicit"
    scopes:
      write:pets: "modify pets in your account"
      read:pets: "read your pets"
  api_key:
    type: "apiKey"
    name: "api_key"
    in: "header"
