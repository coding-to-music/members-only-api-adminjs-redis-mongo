openapi: "3.0.0"
info:
  title: "Sample API mimicking a members-only service"
  version: "1.0.0"
  contact:
    name: "Lekan Adetunmbi"
    email: "me@pollaroid.net"
  license:
    name: "MIT"
    url: "https://opensource.org/licenses/MIT"
servers:
  - url: "https://wauth-svr.azurewebsites.net/api"
    description: "Production"
components:
  schemas:
    User:
      type: object
      properties:
        _id:
          type: integer
          format: int64
        email:
          type: string
        name:
          type: string
        avatar:
          type: string
        isAdmin:
          type: boolean
        isMember:
          type: boolean
        last_login:
          type: string
          format: date-time
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
        tokenVersion:
          type: integer
          format: int64
        tokenUser:
          $ref: "#/components/schemas/User"
    Token:
      type: object
      properties:
        id:
          type: integer
          format: int64
        userId:
          type: integer
          format: int64
        user:
          $ref: "#/components/schemas/User"
    Error:
      type: object
      properties:
        code:
          type: integer
          format: int32
        message:
          type: string
        details:
          type: string
        status:
          type: integer
          format: int32
        timestamp:
          type: string
          format: date-time
        path:
          type: string
        method:
          type: string
        trace:
          type: string
        error:
          type: string
        error_description:
          type: string
        error_uri:
          type: string
        error_debug:
          type: string
        error_code:
          type: string
        error_subcode:
paths:
  /user/userinfo:
    get:
      summary: "Get user information"
      description: "Get user information"
      operationId: "getUserInfo"
      tags:
        - "User"
      responses:
        200:
          description: "Successful operation"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        401:
          description: "Unauthorized"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        403:
          description: "Forbidden"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        404:
          description: "Not Found"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        500:
          description: "Internal Server Error"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /user/register:
    post:
      summary: "Register a new user"
      description: "Register a new user"
      operationId: "registerUser"
      tags:
        - "User"
      requestBody:
        description: "User registration information"
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/User"
      responses:
        201:
          description: "Successful operation"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        400:
          description: "Bad Request"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        422:
          description: "Conflict"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        500:
          description: "Internal Server Error"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
